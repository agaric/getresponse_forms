<?php

/**
 * @file
 * Creates forms integrated with GetResponse.
 */

use \Drupal\getresponse_forms\Entity\GetresponseForms;

define('GETRESPONSE_FORMS_BLOCK', 1);
define('GETRESPONSE_FORMS_PAGE', 2);
define('GETRESPONSE_FORMS_BOTH', 3);

/**
 * Loads a single GetresponseForms entity by ID.
 *
 * @param int $signup_id
 *   The ID of the GetresponseForms entity to load.
 *
 * @return \Drupal\getresponse_forms\Entity\GetresponseForms
 *   The GetresponseForms entity.
 */
function getresponse_forms_load($signup_id) {
  return GetresponseForms::load($signup_id);
}

/**
 * Loads multiple GetresponseForms entities.
 *
 * @param array $signup_ids
 *   Array of GetresponseForms entity IDs to load.
 * @param bool $reset
 *   TRUE to reset cache when loading GetresponseForms entities.
 *
 * @return \Drupal\getresponse_forms\Entity\GetresponseForms[]
 *   Array of GetresponseForms entities.
 */
function getresponse_forms_load_multiple($signup_ids = array(), $reset = FALSE) {
  if (empty($signup_ids)) {
    $signup_ids = NULL;
  }

  $controller = \Drupal::entityTypeManager()->getStorage('getresponse_forms');

  if ($reset) {
    $controller->resetCache($signup_ids);
  }

  return $controller->loadMultiple($signup_ids);
}

/**
 * Convert GetResponse custom fields to Drupal Form API elements.
 *
 * @param array $field
 *   The GetResponse field to convert to a form element.
 *
 * @return array
 *   A properly formatted Drupal form element.
 */
function getresponse_forms_drupal_form_element($field, &$fieldset = NULL, $form_state = NULL) {
  $weight = $field->getWeight();
  $definition = $field->getPluginDefinition();
  if (isset($definition['customFieldId'])) {
    $key = $definition['name'];
    $name = ucfirst(trim(str_replace('_', ' ', $definition['name'])));
    $gr_fields = getresponse_get_custom_fields();
    if (isset($gr_fields[$definition['customFieldId']])) {
      $field = $gr_fields[$definition['customFieldId']];
    }
  }
  else {
    // This is a non-custom GetResponse field.
    $key = $definition['id'];
    $name = $definition['label'];
    $field = (object) ['fieldType' => 'text'];
  }
  // Insert common FormAPI properties:
  $input = array(
    '#weight' => isset($weight) ? $weight : 0,
    '#required' => isset($required) ? $required : FALSE,
  );

  if (is_string($name)) {
    $input['#title'] = t('@field', array('@field' => $name));
  }
  else {
    $input['#title'] = $name;
  }

  switch ($field->fieldType) {
    case 'single_select':
      // Dropdown is mapped to <select> element in Drupal Form API.
      $input['#type'] = 'select';

      $choices = array();
      foreach ($field->values as $choice_key => $choice) {
        $choices[$choice_key] = $choice;
      }

      $input['#options'] = $choices;
      break;

    case 'radio':
      // Radio is mapped to <input type='radio' /> i.e. 'radios' element in
      // Drupal Form API.
      $input['#type'] = 'radios';

      $choices = array();
      foreach ($field->values as $choice_key => $choice) {
        $choices[$choice_key] = $choice;
      }

      $input['#options'] = $choices;
      break;

    case 'checkbox':
      // Checkbox is mapped to <input type='checkbox' /> i.e. 'checkbox' or
      // 'checkboxes' element in Drupal Form API.
      if (count($field->values) === 1) {
        $input['#type'] = 'checkbox';
        $input['#title'] = t(reset($field->values));
      }
      else {
        $input['#type'] = 'checkboxes';
        $choices = array();
        foreach ($field->values as $choice_key => $choice) {
          $choices[$choice_key] = $choice;
        }
        $input['#options'] = $choices;
      }
      break;

    case 'email':
      if (\Drupal::service('element_info')->getInfo('emailfield', '#type')) {
        // Set to an HTML5 email type if 'emailfield' is supported:
        $input['#type'] = 'email';
      }
      else {
        // Set to standard text type if 'emailfield' isn't defined:
        $input['#type'] = 'textfield';
      };
      $input['#size'] = $field->options->size;
      break;

    case 'textarea':
      $input['#type'] = 'textarea';
      break;

    default:
      // This is a standard input[type=text] or something we can't handle with
      // Drupal FormAPI.
      $input['#type'] = 'textfield';
      // $input['#size'] = $field->options->size;
      break;
  }

  // Special cases for GetResponse hidden defined fields:
  if (isset($field->hidden) && $field->hidden === TRUE) {
    $input['#type'] = 'hidden';
  }

  // Add template suggestions based on being signup fields, and field type.
  // This division based on https://www.drupal.org/files/drupal8.theme-input.23.patch
  // from https://www.drupal.org/node/1812724
  $input_types = ['button', 'image_button', 'textfield', 'tel', 'email', 'url', 'search', 'number', 'range', 'color', 'password', 'checkbox', 'radio', 'file'];
  $match_types = ['select', 'radios', 'container', 'vertical_tabs'];
  // $known_weird = ['checkboxes'] // the wrapper gets theme hook checkboxes, while
  // the element gets form_element__checkbox, and then the checkboxes themselves inside
  // the element get input__checkbox (per above).
  if (in_array($input['#type'], $input_types)) {
    $input['#theme'] = 'input__' . $input['#type'] . '__signup__' . $field->fieldType;
  }
  // elseif (in_array($input['#type'], $match_types)) {
    // $input['#theme'] = $input['#type'] . '__signup__' . $field->fieldType;
  // }

  if ($form_state) {
    // We can't manually set the default values because we don't seem to have the values in the form state.
    // drupal_set_message(var_export($key, TRUE));
//    $input['#default_value'] = $form_state->getValue($key, '');
    // drupal_set_message(var_export($input, TRUE));
    // drupal_set_message(var_export($form_state, TRUE));
  }

  if ($fieldset) {
    $fieldset[$key] = $input;
  }
  return $input;
}
