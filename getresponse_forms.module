<?php

/**
 * @file
 * Creates forms integrated with GetResponse.
 */

use \Drupal\getresponse_forms\Entity\GetresponseForms;

define('GETRESPONSE_FORMS_BLOCK', 1);
define('GETRESPONSE_FORMS_PAGE', 2);
define('GETRESPONSE_FORMS_BOTH', 3);

/**
 * Loads a single GetresponseForms entity by ID.
 *
 * @param int $signup_id
 *   The ID of the GetresponseForms entity to load.
 *
 * @return \Drupal\getresponse_forms\Entity\GetresponseForms
 *   The GetresponseForms entity.
 */
function getresponse_forms_load($signup_id) {
  return GetresponseForms::load($signup_id);
}

/**
 * Loads multiple GetresponseForms entities.
 *
 * @param array $signup_ids
 *   Array of GetresponseForms entity IDs to load.
 * @param bool $reset
 *   TRUE to reset cache when loading GetresponseForms entities.
 *
 * @return \Drupal\getresponse_forms\Entity\GetresponseForms[]
 *   Array of GetresponseForms entities.
 */
function getresponse_forms_load_multiple($signup_ids = array(), $reset = FALSE) {
  if (empty($signup_ids)) {
    $signup_ids = NULL;
  }

  $controller = \Drupal::entityTypeManager()->getStorage('getresponse_forms');

  if ($reset) {
    $controller->resetCache($signup_ids);
  }

  return $controller->loadMultiple($signup_ids);
}

/**
 * Convert GetResponse custom fields to Drupal Form API elements.
 *
 * @param array $field
 *   The mailchimp-formatted form element to convert.
 *
 * @return array
 *   A properly formatted drupal form element.
 */
function getresponse_forms_drupal_form_element($field) {
  // Insert common FormAPI properties:
  $input = array(
    '#weight' => isset($field->weight) ? $field->weight : 0,
    '#required' => isset($field->required) ? $field->required : FALSE,
  );

  if (is_string($field->name)) {
    $input['#title'] = t('@field', array('@field' => $field->name));
  }
  else {
    $input['#title'] = $field->name;
  }

  switch ($field->fieldType) {
    case 'single_select':
      // Dropdown is mapped to <select> element in Drupal Form API.
      $input['#type'] = 'select';

      // Creates options, we must delete array keys to have relevant information
      // on MailChimp.
      $choices = array();
      foreach ($field->options->choices as $choice) {
        $choices[$choice] = $choice;
      }

      $input['#options'] = $choices;
      break;

    case 'radio':
      // Radio is mapped to <input type='radio' /> i.e. 'radios' element in
      // Drupal Form API.
      $input['#type'] = 'radios';

      // Creates options, we must delete array keys to have relevant information
      // on MailChimp.
      $choices = array();
      foreach ($field->options->choices as $choice) {
        $choices[$choice] = $choice;
      }

      $input['#options'] = $choices;
      break;

    case 'email':
      if (\Drupal::service('element_info')->getInfo('emailfield', '#type')) {
        // Set to an HTML5 email type if 'emailfield' is supported:
        $input['#type'] = 'email';
      }
      else {
        // Set to standard text type if 'emailfield' isn't defined:
        $input['#type'] = 'textfield';
      };
      $input['#size'] = $field->options->size;
      $input['#element_validate'] = array('mailchimp_validate_email');
      break;

    default:
      // This is a standard input[type=text] or something we can't handle with
      // Drupal FormAPI.
      $input['#type'] = 'textfield';
      $input['#size'] = $field->options->size;
      break;
  }

  // Special cases for GetResponse hidden defined fields:
  if ($field->hidden === TRUE) {
    $input['#type'] = 'hidden';
  }

  return $input;
}
